=head1 Debian Packaging Tutorial

A tutorial for producing simple Debian packages.

=head2 Prerequisites

Make sure you have the C<build-essential> and C<devscripts> packages installed:

=begin programlisting

    sudo apt-get install build-essential devscripts

=end programlisting

This will pull in a number of dependencies, so you may have to wait a few minutes.

=head2 Environment

In order to build packages with the correct metadata, two environment variables need to be set: C<DEBFULLNAME> and C<DEBEMAIL>. You can set these in your C<~/.bashrc> like so:

=begin programlisting

    export DEBFULLNAME='Paul Waring'
    export DEBEMAIL='paul@xk7.net'

=end programlisting

For these changes to take effect, start a new terminal or execute C<source ~/.bashrc>.

=head2 Package Creation

Create and enter a temporary directory to build the package in.

=begin programlisting

    mkdir /tmp/debian-tutorial
    cd /tmp/debian-tutorial

=end programlisting

Download the source - in this case from Github:

=begin programlisting

    wget https://github.com/fabpot/Twig/tarball/v1.9.2

=end programlisting

Debian assumes specific file names, of the format:

=begin programlisting

    [PACKAGE_NAME]_[VERSION].orig.tar.gz
    twig_1.9.2.orig.tar.gz

=end programlisting

So let's rename the file now:

=begin programlisting

    mv v1.9.2 twig_1.9.2.orig.tar.gz

=end programlisting

Now extract the file, but we must remember to strip the first component of the file path (which will be something like C<fabpot-Twig-75d3d9f>).

=begin programlisting

    mkdir twig-1.9.2
    tar --strip-components=1 -xzvf twig_1.9.2.orig.tar.gz -C twig-1.9.2

=end programlisting

Produce directories for the various files.

=begin programlisting

    cd twig-1.9.2
    mkdir debian
    mkdir debian/source
    cd debian

=end programlisting

Now we need to create some of the files required. First, let's produce the basic ones which we don't need to change.

=begin programlisting

    echo '8' > compat
    echo '3.0 (quilt)' > source/format

=end programlisting

For the rules file, we are going to cheat slightly and use one which I prepared earlier.

=begin programlisting

    wget http://tinyurl.com/debrules -O rules
    chmod 755 rules

=end programlisting

Add the following line after the C<dh_installdirs> rule of the C<install> target. Remember to start the line with a tab, as this is a makefile.

=begin programlisting

    cp -r lib/Twig debian/twig/usr/share/php/twig/

=end programlist

Create the C<.dirs> file, which lists all directories created for this package, one per line, and has the same name as the package.

=begin programlisting

    touch twig.dirs

=end programlist

Add the following line - only one directory required for this package.

=begin programlisting

    usr/share/php/twig

=end programlist

Now we need a skeleton changelog file. Change to the parent directory.

=begin programlisting

    cd ../
    dch --create

=end programlist

This will create a file C<debian/changelog> and start an editor process. Make sure you add C<-1> to the version, as this is a Debian-specific requirement.

Open a file C<debian/control> in your favourite editor.

=begin programlisting

    Source: twig
    Maintainer: Paul Waring <paul@xk7.net>
    Section: misc
    Priority: optional
    Standards-Version: 3.9.3
    Build-Depends: debhelper (>= 8)

    Package: twig
    Architecture: all
    Depends: php5 (>= 5.3), ${misc:Depends}
    Description: PHP template library

=end programlist

There are some additional lines you can add, such as checksums, homepage etc.

Explanations of some of these lines:

C<Package:> Name of the package.

C<Architecture:> If files are the same on all architectures (which is the case for a library consisting of PHP files), set this to C<all>. Can be set to C<any> if it is a binary package which works on all architectures, or a list of architectures, e.g. C<amd64 i386>.

Now we need to specify the licence.

=begin programlisting

    cd debian/
    wget http://tinyurl.com/debcopy -O copyright

=end programlisting

Finally, let's build the package:

=begin programlisting

    cd ../
    debuild -us -uc

=end programlisting

C<-us -uc> means 'do not sign the changes file or the non-existent C<.dsc> file.

Install the C<.deb> file. Make sure dependencies have been installed first!

=begin programlisting

    cd ../
    sudo dpkg -i twig_1.9.2-1_all.deb

=end programlisting

Head to the installation directory to see if the files are there:

=begin programlisting

    cd /usr/share/php/twig
    ls -l

=end programlisting

Check the list of installed packages:

=begin programlisting

    sudo apt-cache search twig

=end programlisting

Remove the package:

=begin programlisting

    sudo apt-get purge twig

=end programlisting

Verify that the files and package have been deleted:

=begin programlisting

    cd /usr/share/php/twig
    sudo apt-cache search twig

=end programlisting

=head2 File Intend to Package (ITP) bug

An ITP bug alerts other users to the fact that you are intending to package a particular piece of software, so that others can offer help, mentoring or sponsorship. All bugs of this type are filed against the special wnpp package. You should also check to see whether anyone has already filed an ITP bug for the same package, so that you do not duplicate efforts.

This step is optional if you are intending to produce a package for private use, e.g. of a closed source web application.

Here's one I prepared earlier: http://bugs.debian.org/645883
